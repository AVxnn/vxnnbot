const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config()
const axios = require("axios");
const BrawlStars = require("brawlstars.js")
const tokens = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImtpZCI6IjI4YTMxOGY3LTAwMDAtYTFlYi03ZmExLTJjNzQzM2M2Y2NhNSJ9.eyJpc3MiOiJzdXBlcmNlbGwiLCJhdWQiOiJzdXBlcmNlbGw6Z2FtZWFwaSIsImp0aSI6IjUzYTQyOTcyLWEwOTgtNGNmNS04YThlLTA2YTU5ZWVhYmJjOCIsImlhdCI6MTY2MjE1MTE4MSwic3ViIjoiZGV2ZWxvcGVyL2Q5NDg0ZDJhLWJlNGMtNDQwNC0xOGJhLWI2ODM4OWMwYWNiYiIsInNjb3BlcyI6WyJicmF3bHN0YXJzIl0sImxpbWl0cyI6W3sidGllciI6ImRldmVsb3Blci9zaWx2ZXIiLCJ0eXBlIjoidGhyb3R0bGluZyJ9LHsiY2lkcnMiOlsiOC4yMS4xMTAuMjAiXSwidHlwZSI6ImNsaWVudCJ9XX0.mAuB-Ux5PRFceES2aSMknlZ19R8ajomm014U4t4hgFnEeynlg14eKlp6-p3HJJsrV2JYmC-SFoMgtRo6w8HnUg"
const client = new BrawlStars.Client(tokens)
const token = process.env.TELEGRAM_API_TOKEN || '';
const translit = require('./func/translit')

const bot = new TelegramBot(token, {polling: true});

const keyboard = [
  [
    {
      text: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞',
      callback_data: 'generate'
    }
  ]
];

const gif = [
  [
    {
      text: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å gifky',
      callback_data: 'gif'
    }
  ]
];

const generatee = async (e, url) => {
  await bot.sendPhoto(e, url, {
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
}

bot.onText(/\/start/, async (msg, match) => {
  const chatId = msg.from.id;
  let value = match[0].split(' ').filter((v, i) => i >= 2).join(' ')
  console.log(value)
  await bot.sendSticker(chatId, 'CAACAgQAAxkBAAEEnIdib_FFuDgXsXRfSksM4SefWQJY7gACjgsAAvsm6FJ-_p0kiwRi2iQE');
  await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç–∏–∫–∏, —Ç–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name} –ø—Ä–∞–≤–∏–ª—å–Ω–æ?
–Ø –¥—É–º–∞—é —á—Ç–æ –º—ã —Å —Ç–æ–±–æ–π –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–º –≤—Ä–µ–º—è!`);

  setTimeout(() => {
    bot.sendMessage(chatId, `–ö–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å –≤ –º–µ–Ω—é—à–∫–µ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ —Å—Ç—Ä–æ–∫–µ "/" `);
  }, 2000)
});

// ${msg.from.first_name} —Ä–µ—à–∏–ª –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É.
bot.onText(/\/q@MetaVxnn_bot (.+)/, async(msg, match) => {
  const value = match[1];
  console.log(msg, match)
  await bot.sendMessage(msg.chat.id, `
–î–µ–π—Å—Ç–≤–∏–µ: ${value}
–†–µ–∑—É–ª—å—Ç–∞—Ç: ${Math.round(Math.random() * 1) == 1 ? '–î–∞' : '–ù–µ—Ç'}`)
});

// ${msg.from.first_name} —Ä–µ—à–∏–ª –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É.
bot.onText(/\/trans@MetaVxnn_bot (.+)/, async(msg, match) => {
  try {
    const value = match[1];
    console.log(value)
    console.log(msg, match)
    await bot.sendMessage(msg.chat.id, `${translit(value)}`)
  } catch (e) {
    console.log(e)
  }
});



bot.onText(/\/editable/, function onEditableText(msg) {
  const opts = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'Edit Text',
            // we shall check for this value when we listen
            // for "callback_query"
            callback_data: 'edit'
          }
        ]
      ]
    }
  };
  bot.sendMessage(msg.from.id, 'Original Text', opts);
});


bot.onText(/\/love/, async function onLoveText(msg) {
  await bot.sendPoll(msg.chat.id, 'Is Telegram great?', ['Sure', 'Of course'], {is_anonymous: false})
});




// ${msg.from.first_name} —Ä–µ—à–∏–ª –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É.
bot.onText(/\/brawl@MetaVxnn_bot (.+)/, async(msg, match) => {
  const value = match[1];
  console.log(msg, match)
  const player = await client.getPlayer(value)
  const bestBrawler = player.brawlers.filter(i => i.trophies === Math.max(...player.brawlers.map(i => {return +i.trophies})))
  await bot.sendMessage(msg.chat.id, `–ò–º—è: ${player.name}, 
–¢—ç–≥: ${player.tag}, 
–ö—É–±–∫–∏: ${player.trophies}, 
–≤—Å–µ–≥–æ –ø–æ–±–µ–¥: ${player.totalVictories}, 
–≤—Å–µ–≥–æ –±—Ä–∞–≤–ª–µ—Ä–æ–≤: ${player.brawlerCount},
  üíö –ª—é–±–∏–º—ã–π –±—Ä–∞–≤–ª–µ—Ä: ${bestBrawler[0].name},
  üíö —Å–∏–ª–∞: ${bestBrawler[0].power},
  üíö —Ä–∞–Ω–≥: ${bestBrawler[0].rank},
  üíö –∫—É–±–∫–æ–≤: ${bestBrawler[0].trophies}`)
});

bot.onText(/\/brawler@MetaVxnn_bot (.+)/, async(msg, match) => {
  const value = match[1];
  console.log(msg, match)
  const res = await client.getBrawlers()
  const brawler = res.data.filter(i => i.name === value.toUpperCase())
  console.log(brawler[0].gadgets)
  await bot.sendMessage(msg.chat.id, `–ò–º—è –±—Ä–∞–≤–ª–µ—Ä–∞: ${brawler[0].name},
id: ${brawler[0].id},
–ì–∞–¥–∂–µ—Ç—ã: ${brawler[0].gadgets.length > 1 ? brawler[0].gadgets.map(i => (` ${i.name} `)) : `${brawler[0].gadgets[0].name}`},
–ü–∞—Å—Å–∏–≤–∫–∏: ${brawler[0].starPowers.length > 1 ? brawler[0].starPowers.map(i => (` ${i.name} `)) : `${brawler[0].starPowers[0].name}`}`
  )});

bot.onText(/\/send@MetaVxnn_bot (.+) (.+)/, async (msg, match) => {
  if (msg.from.id === 679898263) {
    const chatI = match[1];
    let value = match[0].split(' ').filter((v, i) => i >= 2).join(' ')
    console.log(value)
    await bot.sendMessage(chatI, match[0].split(' ').filter((v, i) => i >= 2).join(' '));
  }
});

bot.onText(/\/cube/,async (msg) => {
  console.log(msg)
  await bot.sendMessage(msg.chat.id, `–Ø –±—Ä–æ—Å–∏–ª(–∞) –∫—É–±–∏–∫ –∏ –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: ${Math.round(Math.random() * 6)}`)
});

// bot.onText(/\/idinaxyibot@MetaVxnn_bot (.+)/, async(msg, match) => {
//         const value = match[1];
//         console.log(msg, match)
//         await bot.sendMessage(msg.chat.id, `
// –î–µ–π—Å—Ç–≤–∏–µ: ${value}
// –†–µ–∑—É–ª—å—Ç–∞—Ç: ${Math.round(Math.random() * 1) == 1 ? '–î–∞' : '–ù–µ—Ç'}`)
// });

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  if (msg.from.id === 679898263) {
    bot.setMyCommands([
      {command: '/random', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞'},
      {command: '/gif', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π gif'},
      {command: '/q', description: '–î–∞ –∏–ª–∏ –Ω–µ—Ç'},
      {command: '/idinaxyibot', description: '–ü–æ—à–ª–∏ –Ω–∞—Ö—É–π –±–æ—Ç–∞'},
      {command: '/send', description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É'},
      {command: '/sendall', description: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º —é–∑–µ—Ä–∞–º'},
      {command: '/sticker', description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É'},
      {command: '/stickerall', description: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –≤—Å–µ–º —é–∑–µ—Ä–∞–º'},
      {command: '/photoall', description: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Å–µ–º —é–∑–µ—Ä–∞–º'},
    ])
  } else {
    bot.setMyCommands([
      {command: '/random', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞'},
      {command: '/gif', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π gif'},
      {command: '/q', description: '–î–∞ –∏–ª–∏ –Ω–µ—Ç'}
    ])
    bot.sendMessage(1676384990, `–ò–º—è: ${msg.from.first_name}; id: ${msg.from.id}; msg: ${msg.text}; chatId: ${msg.chat.id}`)
  }

  if (msg.text === '/random' || msg.text === '/random@MetaVxnn_bot') {
    axios.get('https://api.thecatapi.com/v1/images/search')
      .then(res => {
        url = res.data[0].url
        generatee(chatId, url)
      })
  }

  if (msg.text === '/gif' || msg.text === '/gif@MetaVxnn_bot') {
    axios.get('https://api.giphy.com/v1/gifs/random?api_key=E7urEC8EODS2Ua5cQehdGDIoIVtlbNmA&tag=&rating=g')
      .then(res => {
        url = res.data.data.images.preview.mp4;
        bot.sendVideo(chatId, url, {
          reply_markup: {
            inline_keyboard: gif
          }
        });
      })
  }

  if (msg.text === '—Ç—ã —Å–æ–±–∞–∫–∞') {
    const opts = {
      reply_to_message_id: msg.message_id,
      'reply_markup': {
        'inline_keyboard' : [
          [{text: "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data: "reply"}, {text: "–ó–∞–≥–æ—Ç–æ–≤–∫–∞", callback_data: "defaul"}]
        ]
      }
    };
    await bot.sendMessage(msg.chat.id, `–°–∞–º —Ç—ã —Å–æ–±–∞–∫–∞`, opts)
    await bot.sendPoll(msg.chat.id, 'Is Telegram great?', ['Sure', 'Of course'], {is_anonymous: false})
    await bot.sendDice(msg.chat.id)
    console.log(msg);
    await bot.forwardMessage(msg.chat.id, 679898263, 1313)
  }

  if (msg.from.id === 679898263) {
    await bot.setMyCommands([
      {command: '/cube', description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6'},
      {command: '/trans', description: '–ü–µ—Ä–µ–≤–æ–¥ —Å –î–∞—Ä–∏–Ω–µ–Ω–æ–≥–æ'},
    ])
    await bot.sendMessage(679898263, `–ò–º—è: ${msg.from.first_name};\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${msg.text};\nchatId: ${msg.chat.id}`, {
      'reply_markup': {
        'inline_keyboard' : [
          [{text: "–£–±—Ä–∞—Ç—å –∫–ª–∞–≤—É", callback_data: "clear"}, {text: "–ó–∞–≥–æ—Ç–æ–≤–∫–∞", callback_data: "demo"}]
        ]
      }
    })
  } else {
    await bot.sendMessage(679898263, `–ò–º—è: ${msg.from.first_name};\nid: ${msg.from.id};\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${msg.text};\nchatId: ${msg.chat.id}`, {
      'reply_markup': {
        'inline_keyboard': [
          [{text: "–£–±—Ä–∞—Ç—å –∫–ª–∞–≤—É", callback_data: "clear"}, {text: "–ó–∞–≥–æ—Ç–æ–≤–∫–∞", callback_data: "demo"}]
        ]
      }
    })
  }
})


// -1001178790101
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;

  let url = '';

  if (query.data === 'gif') {
    axios.get('https://api.giphy.com/v1/gifs/random?api_key=E7urEC8EODS2Ua5cQehdGDIoIVtlbNmA&tag=&rating=g')
      .then(res => {
        url = res.data.data.images.preview.mp4;
        bot.sendVideo(chatId, url, {
          reply_markup: {
            inline_keyboard: gif
          }
        });
      })
  }
  if (query.data == 'clear') {
    const action = query.data;
    const msg = query.message;
    const opts = {
      chat_id: msg.chat.id,
      message_id: msg.message_id,
      reply_markup: {
        remove_keyboard: true
      }
    };
    let text;

    if (action === 'clear') {
      text = '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞';
    }

    bot.sendMessage(chatId, text, opts);
  }
  if(query.data == 'demo') {
    const opts = {
      reply_markup: JSON.stringify({
        'keyboard': [[`/send@MetaVxnn_bot ${query.message?.text?.match('chatId:[ ][ -[][0-9]*')[0].split(' ')[1]} –í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç`]],
        'inline_keyboard' : [
          [{text: "—É–±—Ä–∞—Ç—å –∫–ª–∞–≤—É", callback_data: "clear"}]
        ]
      })
    };
    await bot.sendMessage(chatId, `–ó–∞–≥–æ—Ç–æ–≤–∫–∞:`, opts)
}
  }
);